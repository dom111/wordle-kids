{
  "version": 3,
  "sources": ["../node_modules/@dom111/element/dist/Element.js", "../src/Game/Difficulty.ts", "../src/Game/Score.ts", "../src/InvalidOptions.ts", "../src/Game/Theme.ts", "../src/Game/WordLists.ts", "../src/Game/Mode.ts", "../src/Game.ts", "../src/components/Guesses.ts", "../src/components/Guess.ts", "../src/components/Letter.ts", "../node_modules/css-what/lib/es/types.js", "../node_modules/css-what/lib/es/parse.js", "../src/lib/Element.ts", "../src/components/Header.ts", "../src/components/OptionsModal.ts", "../src/components/Modal.ts", "../src/components/Button.ts", "../src/components/Tooltip.ts", "../src/components/Keyboard.ts", "../src/app.ts"],
  "sourcesContent": ["\"use strict\";var e,t=this&&this.__classPrivateFieldSet||function(e,t,s,o,r){if(\"m\"===o)throw new TypeError(\"Private method is not writable\");if(\"a\"===o&&!r)throw new TypeError(\"Private accessor was defined without a setter\");if(\"function\"==typeof t?e!==t||!r:!t.has(e))throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");return\"a\"===o?r.call(e,s):r?r.value=s:t.set(e,s),s},s=this&&this.__classPrivateFieldGet||function(e,t,s,o){if(\"a\"===s&&!o)throw new TypeError(\"Private accessor was defined without a getter\");if(\"function\"==typeof t?e!==t||!o:!t.has(e))throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");return\"m\"===s?o:\"a\"===s?o.call(e):o?o.value:t.get(e)};Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.Element=exports.toggleClass=exports.t=exports.s=exports.removeClass=exports.once=exports.onEach=exports.on=exports.off=exports.hasClass=exports.empty=exports.emitCustom=exports.emit=exports.addClass=void 0;exports.addClass=(e,...t)=>e.classList.add(...t);exports.emit=(e,t)=>e.dispatchEvent(t);exports.emitCustom=(e,t,...s)=>(0,exports.emit)(e,new CustomEvent(t,{detail:s}));exports.empty=e=>{for(var t;e.hasChildNodes();)null===(t=e.firstChild)||void 0===t||t.remove()};exports.hasClass=(e,t)=>e.classList.contains(t);exports.off=(e,t,s,o={})=>e.removeEventListener(t,s,o);exports.on=(e,t,s,o={})=>e.addEventListener(t,s,o);exports.onEach=(e,t,s,o={})=>t.forEach((t=>(0,exports.on)(e,t,s,o)));exports.once=(e,t,s,o={})=>(0,exports.on)(e,t,s,Object.assign(Object.assign({},\"boolean\"==typeof o?{capture:o}:o),{once:!0}));exports.removeClass=(e,...t)=>e.classList.remove(...t);exports.s=(e,...t)=>{const s=document.createElement(\"div\");s.innerHTML=e;const r=s.firstElementChild;return t.forEach((e=>{e instanceof o?r.append(e.element()):e instanceof Node?r.append(e):r.append((0,exports.t)(e))})),r};exports.t=e=>document.createTextNode(e);exports.toggleClass=(e,...t)=>t.forEach((t=>e.classList.toggle(t)));class o{constructor(s){e.set(this,void 0),t(this,e,s,\"f\")}static fromString(e){return new o((0,exports.s)(e))}addClass(...e){(0,exports.addClass)(this.element(),...e)}append(...e){e.forEach((e=>{e instanceof o&&(e=e.element()),this.element().append(e)}))}element(){return s(this,e,\"f\")}emit(e){return(0,exports.emit)(this.element(),e)}emitCustom(e,...t){return(0,exports.emitCustom)(this.element(),e,...t)}empty(){(0,exports.empty)(this.element())}hasClass(e){return(0,exports.hasClass)(this.element(),e)}off(e,t,s={}){(0,exports.off)(this.element(),e,t,s)}on(e,t,s={}){(0,exports.on)(this.element(),e,t,s)}onEach(e,t,s={}){(0,exports.onEach)(this.element(),e,t,s)}once(e,t,s={}){(0,exports.once)(this.element(),e,t,s)}query(e){return this.element().querySelector(e)}queryAll(e){return this.element().querySelectorAll(e)}remove(){this.element().remove()}removeClass(...e){(0,exports.removeClass)(this.element(),...e)}toggleClass(...e){(0,exports.toggleClass)(this.element(),...e)}}exports.Element=o,e=new WeakMap,exports.default=o;", "export enum Difficulty {\n  EASY,\n  NORMAL,\n  HARD,\n}\n\nexport const difficulties: Difficulty[] = [\n  Difficulty.EASY,\n  Difficulty.NORMAL,\n  Difficulty.HARD,\n];\n\nexport const labels = {\n  [Difficulty.EASY]: 'Easy',\n  [Difficulty.NORMAL]: 'Normal',\n  [Difficulty.HARD]: 'Hard',\n};\n\nexport const label = (mode: Difficulty | string | number): string =>\n  labels[mode] ?? 'Invalid';\n\nexport const toDifficulty = (value: any): Difficulty => {\n  const intValue = parseInt(value);\n\n  if (!difficulties.includes(intValue)) {\n    throw new TypeError(`Invalid Difficulty: ${value}`);\n  }\n\n  return intValue;\n};\n\nexport default Difficulty;\n", "export enum Score {\n  UNKNOWN = -1,\n  WRONG,\n  WRONG_PLACE,\n  RIGHT,\n}\n\nexport type ScoreType =\n  | Score.UNKNOWN\n  | Score.WRONG\n  | Score.WRONG_PLACE\n  | Score.RIGHT;\n\nexport type ScoreList = ScoreType[];\n\nexport default Score;\n", "export class InvalidOptions extends TypeError {}\n\nexport default InvalidOptions;\n", "import Difficulty from './Difficulty';\nimport InvalidOptions from '../InvalidOptions';\n\nexport interface ThemeDetails {\n  label: string;\n  path: string;\n}\n\nexport const themes: ThemeDetails[] = [\n  {\n    label: 'Animals',\n    path: './lists/themes/animals.json',\n  },\n];\n\nexport interface ThemeDefinition {\n  words: WordDefinition[];\n}\n\nexport interface WordDefinition {\n  word: string;\n  difficulty: Difficulty;\n  clues: string[];\n}\n\nexport const getThemeByPath = (path: string) => {\n  const [themeDetails] = themes.filter(\n    (themeDetails) => themeDetails.path === path\n  );\n\n  if (!themeDetails) {\n    throw new InvalidOptions(`Unknown theme '${path}'.`);\n  }\n\n  return themeDetails;\n};\n\nexport const label = (path: string) => getThemeByPath(path).label ?? 'Unknown';\n", "export type WordLengths = 3 | 4 | 5;\n\nexport const wordLengths: WordLengths[] = [3, 4, 5];\n\nconst wordLists: { [key: number]: string } = {\n  3: './lists/3-letter.json',\n  4: './lists/4-letter.json',\n  5: './lists/5-letter.json',\n};\n\nconst wordListLoaders = new Map<number, Promise<string[]>>();\n\nexport const load = (length: WordLengths): Promise<string[]> => {\n  if (!wordListLoaders.has(length)) {\n    wordListLoaders.set(\n      length,\n      fetch(wordLists[length]).then(\n        (response): Promise<string[]> => response.json()\n      )\n    );\n  }\n\n  return wordListLoaders.get(length);\n};\n", "export enum Mode {\n  FREE_PLAY,\n  THEMED,\n  // DAILY,\n  // CUSTOM,\n}\n\nexport const modes: Mode[] = [\n  Mode.FREE_PLAY,\n  Mode.THEMED,\n  // Mode.DAILY,\n  // Mode.CUSTOM,\n];\n\nexport const labels = {\n  [Mode.FREE_PLAY]: 'Free Play',\n  [Mode.THEMED]: 'Themed',\n  // [Mode.DAILY]: 'Daily',\n  // [Mode.CUSTOM]: 'Custom',\n};\n\nexport const label = (mode: Mode | string | number): string =>\n  labels[mode] ?? 'Invalid';\n\nexport const toMode = (value: any): Mode => {\n  const intValue = parseInt(value);\n\n  if (!modes.includes(intValue)) {\n    throw new TypeError(`Invalid Mode: ${value}`);\n  }\n\n  return intValue;\n};\nexport default Mode;\n", "import Score, { ScoreList, ScoreType } from './Game/Score';\nimport { ThemeDefinition, WordDefinition, getThemeByPath } from './Game/Theme';\nimport { WordLengths, load as loadWordlist } from './Game/WordLists';\nimport Difficulty from './Game/Difficulty';\nimport InvalidOptions from './InvalidOptions';\nimport Mode from './Game/Mode';\n\nexport class Game {\n  #currentTarget: WordDefinition;\n  #difficulty: Difficulty = Difficulty.EASY;\n  #lengths: WordLengths[];\n  #letterStatuses: { [key: string]: ScoreType } = {};\n  #mode: Mode;\n  #onStart: () => void;\n  #theme: string = '';\n  #validWords: string[] = [];\n\n  constructor(onStart: () => void) {\n    this.#onStart = onStart;\n  }\n\n  private async addAllValidWords(lengths: WordLengths[]): Promise<void> {\n    await Promise.all(lengths.map((length) => this.addValidWords(length)));\n  }\n\n  // TODO: Support dynamic list provision (pass data in via hash, URL/specific lists) to allow kids to practice specific\n  //  spellings etc - backed up by a list of known - kid safe - words.\n  private async addValidWords(length: WordLengths): Promise<void> {\n    const wordlist = await loadWordlist(length);\n\n    wordlist.forEach((word) => this.#validWords.push(word.toUpperCase()));\n  }\n\n  currentTarget(): WordDefinition {\n    return this.#currentTarget;\n  }\n\n  currentWordLength(): WordLengths {\n    return this.#currentTarget.word.length as WordLengths;\n  }\n\n  difficulty(): Difficulty {\n    return this.#difficulty;\n  }\n\n  letterScore(letter: string): ScoreType {\n    return this.#letterStatuses[letter] ?? Score.UNKNOWN;\n  }\n\n  mode(): Mode {\n    return this.#mode;\n  }\n\n  score(guess: string[]): ScoreList {\n    const wordForScoring = [...this.#currentTarget.word];\n\n    return wordForScoring\n      .reduce((result: ScoreList, letter: string, index: number): ScoreList => {\n        if (letter === guess[index]) {\n          this.#letterStatuses[letter] = result[index] = Score.RIGHT;\n\n          // Remove the letter from the word so it doesn't get scored in other places\n          wordForScoring[index] = null;\n        }\n\n        return result;\n      }, new Array(this.currentWordLength()).fill(Score.UNKNOWN))\n      .map((score: ScoreType, index: number) => {\n        if (score === Score.RIGHT) {\n          return score;\n        }\n\n        const wordIndex = wordForScoring.indexOf(guess[index]);\n\n        if (wordIndex > -1) {\n          wordForScoring[wordIndex] = null;\n\n          return (this.#letterStatuses[guess[index]] = Score.WRONG_PLACE);\n        }\n\n        return (this.#letterStatuses[guess[index]] = Score.WRONG);\n      });\n  }\n\n  setDifficulty(difficulty: Difficulty): void {\n    this.#difficulty = difficulty;\n  }\n\n  private async setFreePlay(lengths: WordLengths[]): Promise<void> {\n    await this.addAllValidWords(lengths);\n\n    const word =\n      this.#validWords[\n        Math.floor(this.#validWords.length * Math.random())\n      ].toUpperCase();\n\n    this.#currentTarget = {\n      word,\n      difficulty: 0,\n      clues: [],\n    };\n  }\n\n  setLengths(lengths: WordLengths[]): void {\n    this.#lengths = lengths;\n  }\n\n  setMode(mode: Mode): void {\n    this.#mode = mode;\n  }\n\n  private async setThemedGame(\n    theme: string,\n    difficulty: Difficulty\n  ): Promise<void> {\n    const themeDetails = getThemeByPath(theme);\n\n    this.#theme = theme;\n\n    const details = (await (\n      await fetch(themeDetails.path)\n    ).json()) as ThemeDefinition;\n\n    const possibleWords = details.words.filter(\n      (word) => word.difficulty <= difficulty\n    );\n\n    const lengths = possibleWords.reduce((lengths: WordLengths[], { word }) => {\n      if (!lengths.includes(word.length as WordLengths)) {\n        lengths.push(word.length as WordLengths);\n      }\n\n      return lengths;\n    }, []) as WordLengths[];\n\n    // TODO: check if we've already loaded the wordlists\n    await this.addAllValidWords(lengths);\n\n    // For themed games (any custom games) there might be words that aren't dictionary words, so ensure these are in\n    //  the valid words list too!\n    possibleWords\n      .map(({ word }) => word.toUpperCase())\n      .forEach((word) => {\n        if (!this.#validWords.includes(word)) {\n          this.#validWords.push(word);\n        }\n      });\n\n    const {\n      word,\n      difficulty: Difficulty,\n      clues,\n    } = possibleWords[Math.floor(possibleWords.length * Math.random())];\n\n    this.#currentTarget = {\n      word: word.toUpperCase(),\n      difficulty: Difficulty,\n      clues,\n    };\n  }\n\n  setTheme(theme: string): void {\n    this.#theme = theme;\n  }\n\n  async start(): Promise<void> {\n    if (this.#mode === Mode.THEMED && !this.#theme) {\n      throw new InvalidOptions('Expected `theme` when using `Mode.THEMED`.');\n    }\n\n    this.#letterStatuses = {};\n\n    if (this.#mode === Mode.THEMED) {\n      await this.setThemedGame(this.#theme, this.#difficulty);\n\n      this.#onStart();\n\n      return;\n    }\n\n    if (this.#mode === Mode.FREE_PLAY) {\n      await this.setFreePlay(this.#lengths);\n\n      this.#onStart();\n\n      return;\n    }\n  }\n\n  theme(): string {\n    return this.#theme;\n  }\n\n  validate(guess: string[]): boolean {\n    return this.#validWords.includes(guess.join(''));\n  }\n}\n\nexport default Game;\n", "import Element from '@dom111/element';\nimport Game from '../Game';\nimport Guess from './Guess';\nimport Score from '../Game/Score';\nimport { h } from '../lib/Element';\n\nexport class Guesses extends Element {\n  #complete: boolean = false;\n  #game: Game;\n  #guesses: Guess[] = [];\n\n  constructor(game: Game) {\n    super(\n      h(\n        'section.guesses[tabindex=\"0\"][aria-label=\"Enter your guess\"][autofocus]'\n      )\n    );\n\n    this.#game = game;\n\n    this.addGuess();\n  }\n\n  private addGuess(): void {\n    this.#guesses.push(new Guess(this.#game.currentWordLength()));\n    this.append(this.currentGuess().element());\n\n    requestAnimationFrame(() =>\n      this.element().scrollTo({\n        top: this.element().scrollHeight,\n      })\n    );\n  }\n\n  private currentGuess(): Guess {\n    return this.#guesses[this.#guesses.length - 1];\n  }\n\n  onInput(key: string): void {\n    if (this.#complete) {\n      return;\n    }\n\n    const currentGuess = this.currentGuess().guess(),\n      hasAllLetters =\n        this.currentGuess().length() === this.#game.currentWordLength(),\n      isGuessValid = this.#game.validate(currentGuess);\n\n    if (key === 'Enter' && hasAllLetters && isGuessValid) {\n      const score = this.#game.score(currentGuess);\n\n      this.currentGuess().applyScore(score);\n\n      if (score.every((score) => score === Score.RIGHT)) {\n        // Do celebration!\n        this.#complete = true;\n        this.currentGuess().celebrate();\n\n        return;\n      }\n\n      this.addGuess();\n\n      return;\n    }\n\n    if (key === 'Enter' && hasAllLetters && !isGuessValid) {\n      this.currentGuess().highlightError();\n    }\n\n    if (key === 'Backspace') {\n      this.currentGuess().onInput(key);\n    }\n\n    if (key.match(/^[A-Z]$/i)) {\n      this.currentGuess().onInput(key.toUpperCase());\n    }\n  }\n}\n\nexport default Guesses;\n", "import Element from '@dom111/element';\nimport Letter from './Letter';\nimport { ScoreList } from '../Game/Score';\nimport { h } from '../lib/Element';\n\nexport class Guess extends Element {\n  #letters: Letter[] = [];\n  #maxLength: number;\n\n  constructor(maxLength: number) {\n    super(h('.guess'));\n\n    this.#maxLength = maxLength;\n\n    for (let i = 0; i < maxLength; i++) {\n      this.#letters.push(new Letter());\n    }\n\n    this.append(...this.#letters.map((letter: Letter) => letter.element()));\n  }\n\n  applyScore(score: ScoreList): void {\n    this.#letters.forEach((letter, index) => letter.highlight(score[index]));\n  }\n\n  celebrate() {\n    this.addClass('dance');\n  }\n\n  clearError(): void {\n    this.element().classList.remove('error');\n  }\n\n  guess(): string[] {\n    return this.#letters.map((letter: Letter) => letter.value());\n  }\n\n  highlightError(): void {\n    this.element().classList.add('error');\n  }\n\n  length(): number {\n    return this.#letters.filter((letter: Letter): boolean => letter.hasValue())\n      .length;\n  }\n\n  onInput(key: string): void {\n    if (key === 'Backspace' && this.length() === 0) {\n      return;\n    }\n\n    if (key === 'Backspace') {\n      this.clearError();\n\n      this.#letters[this.length() - 1].setValue('');\n\n      return;\n    }\n\n    if (this.length() === this.#maxLength) {\n      return;\n    }\n\n    this.#letters[this.length()].setValue(key);\n  }\n}\n\nexport default Guess;\n", "import Element, { t } from '@dom111/element';\nimport Score, { ScoreType } from '../Game/Score';\nimport { h } from '../lib/Element';\n\nexport class Letter extends Element {\n  #value: string = '';\n\n  constructor() {\n    super(h('span.letter[tabindex=\"-1\"]'));\n  }\n\n  hasValue(): boolean {\n    return this.#value !== '';\n  }\n\n  highlight(score: ScoreType): void {\n    if (score === Score.RIGHT) {\n      this.element().classList.add('right');\n\n      return;\n    }\n\n    if (score === Score.WRONG_PLACE) {\n      this.element().classList.add('wrong-place');\n\n      return;\n    }\n\n    if (score === Score.WRONG) {\n      this.element().classList.add('wrong');\n\n      return;\n    }\n  }\n\n  setValue(value: string): void {\n    this.#value = value;\n\n    this.empty();\n    this.append(t(value));\n  }\n\n  value(): string {\n    return this.#value;\n  }\n}\n\nexport default Letter;\n", "export var SelectorType;\n(function (SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType || (SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */\nexport const IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false,\n};\nexport var AttributeAction;\n(function (AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction || (AttributeAction = {}));\n", "import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n", "import { parse } from 'css-what';\n\nexport const h = <T extends HTMLElement = HTMLElement>(\n  selector: string,\n  ...childNodes: Node[]\n): T => {\n  const [element] = parse(selector).map((selectors) =>\n    selectors.reduce((element: HTMLElement | null, details) => {\n      if (element === null && details.type !== 'tag') {\n        element = document.createElement('div');\n      }\n\n      if (details.type === 'tag') {\n        return document.createElement(details.name);\n      }\n\n      if (details.type === 'attribute' && details.name !== 'class') {\n        element.setAttribute(details.name, details.value ?? '');\n      }\n\n      if (details.type === 'attribute' && details.name === 'class') {\n        element.classList.add(details.value);\n      }\n\n      return element;\n    }, null)\n  );\n\n  childNodes.forEach((childNode) => element.append(childNode));\n\n  return element as T;\n};\n", "import Element, { on, t } from '@dom111/element';\nimport Mode, { label as modeLabel } from '../Game/Mode';\nimport Game from '../Game';\nimport OptionsModal from './OptionsModal';\nimport { label as difficultyLabel } from '../Game/Difficulty';\nimport { label as themeLabel } from '../Game/Theme';\nimport { h } from '../lib/Element';\nimport Button from './Button';\n\nexport class Header extends Element {\n  constructor(game: Game) {\n    super(\n      h(\n        'nav.header',\n        h('header', h('h1', t('Wordle Kids')), h('section.actions')),\n        h(\n          'h3',\n          t(\n            modeLabel(game.mode()) +\n              (game.mode() === Mode.THEMED\n                ? ` (${themeLabel(game.theme())}) - ${difficultyLabel(\n                    game.difficulty()\n                  )}`\n                : '')\n          )\n        ),\n        h('p', t('A kid-friendly Wordle clone with small words and clues.')),\n        h('.clues')\n      )\n    );\n\n    const cluesContainer = this.element().querySelector('.clues'),\n      optionsModal = new OptionsModal(game),\n      actions = new Element(\n        this.element().querySelector('section.actions') as HTMLElement\n      ),\n      newGame = new Button('\u21BB', 'New game'),\n      hint = new Button('?', 'Get a hint'),\n      options = new Button('\u2699', 'Options');\n\n    newGame.on('click', (event) => {\n      game.start();\n\n      event.preventDefault();\n      event.stopPropagation();\n    });\n\n    hint.on('click', (event) => {\n      const currentClues = cluesContainer.childNodes.length,\n        clues = game.currentTarget().clues ?? [];\n\n      event.preventDefault();\n      event.stopPropagation();\n\n      if (currentClues === clues.length) {\n        cluesContainer.append(h('.clue.no-more', t('No more clues!')));\n      }\n\n      if (currentClues >= clues.length) {\n        return;\n      }\n\n      cluesContainer.append(h('.clue', t(clues[currentClues])));\n    });\n\n    options.on('click', (event) => {\n      optionsModal.open();\n\n      event.preventDefault();\n      event.stopPropagation();\n    });\n\n    actions.append(newGame, hint, options);\n  }\n}\n\nexport default Header;\n", "import {\n  label as difficultyLabel,\n  difficulties,\n  toDifficulty,\n} from '../Game/Difficulty';\nimport Mode, { label as modeLabel, modes, toMode } from '../Game/Mode';\nimport { on, t } from '@dom111/element';\nimport Game from '../Game';\nimport Modal from './Modal';\nimport { themes } from '../Game/Theme';\nimport { h } from '../lib/Element';\n\nconst hideElement = (el: HTMLElement) => el.setAttribute('hidden', ''),\n  showElement = (el: HTMLElement) => el.removeAttribute('hidden');\n\nexport class OptionsModal extends Modal {\n  constructor(game: Game) {\n    super(h('h2', t('Options')));\n\n    this.addClass('options');\n    this.setLabel('Options dialog. Close with Escape key');\n\n    const modeSelect = h<HTMLSelectElement>(\n        'select#mode',\n        ...modes.map((mode) =>\n          h(\n            `option[value=\"${mode}\"]` +\n              (mode === game.mode() ? '[selected]' : ''),\n            t(modeLabel(mode))\n          )\n        )\n      ),\n      themeSelect = h<HTMLSelectElement>(\n        'select#theme',\n        ...themes.map(({ label, path }) =>\n          h(\n            `option[value=\"${path}\"]` +\n              (path === game.theme() ? '[selected]' : ''),\n            t(label)\n          )\n        )\n      ),\n      difficultySelect = h<HTMLSelectElement>(\n        'select#difficulty',\n        ...difficulties.map((difficulty) =>\n          h(\n            `option[value=\"${difficulty}\"]` +\n              (difficulty === game.difficulty() ? '[selected]' : ''),\n            t(difficultyLabel(difficulty))\n          )\n        )\n      ),\n      modeRow = h(\n        'fieldset',\n        h('label[for=\"mode\"][aria-label=\"Choose game mode\"]', t('Game mode')),\n        modeSelect\n      ),\n      themeRow = h(\n        'fieldset' + (game.mode() !== Mode.THEMED ? '[hidden]' : ''),\n        h('label[for=\"mode\"][aria-label=\"Choose theme\"]', t('Theme')),\n        themeSelect\n      ),\n      difficultyRow = h(\n        'fieldset' + (game.mode() !== Mode.THEMED ? '[hidden]' : ''),\n        h(\n          'label[for=\"difficulty\"][aria-label=\"Choose difficulty\"]',\n          t('Difficulty')\n        ),\n        difficultySelect\n      ),\n      applyButton = h('button', t('Apply'));\n\n    const setMode = (mode: any) => {\n        mode = toMode(mode);\n\n        game.setMode(mode);\n\n        if (mode === Mode.THEMED) {\n          showElement(difficultyRow);\n          showElement(themeRow);\n\n          return;\n        }\n\n        hideElement(difficultyRow);\n        hideElement(themeRow);\n      },\n      setTheme = (theme: string) => game.setTheme(theme),\n      setDifficulty = (difficulty: any) =>\n        game.setDifficulty(toDifficulty(difficulty));\n\n    on(modeSelect, 'change', () => setMode(modeSelect.value));\n    on(themeSelect, 'change', () => setTheme(themeSelect.value));\n    on(difficultySelect, 'change', () => setDifficulty(difficultySelect.value));\n    on(applyButton, 'click', () => {\n      game.start();\n\n      this.close();\n    });\n\n    this.append(\n      h('div', modeRow, themeRow, difficultyRow, h('fieldset', applyButton))\n    );\n  }\n}\n\nexport default OptionsModal;\n", "import Element from '@dom111/element';\nimport { h } from '../lib/Element';\n\nexport class Modal extends Element {\n  #contentArea: HTMLElement;\n\n  constructor(...childNodes: Node[]) {\n    super(h('dialog[tabindex=\"0\"]'));\n\n    this.#contentArea = h('.content', ...childNodes);\n\n    this.element().append(this.#contentArea);\n\n    document.body.append(this.element());\n\n    this.bindEvents();\n  }\n\n  append(...childNodes: Node[]): void {\n    this.#contentArea.append(...childNodes);\n  }\n\n  private bindEvents(): void {\n    this.on('click', (event) => {\n      if (event.target !== this.element()) {\n        return;\n      }\n\n      this.close();\n    });\n\n    this.on('keydown', (event: KeyboardEvent) => {\n      if (event.key !== 'Escape') {\n        return;\n      }\n\n      this.close();\n    });\n  }\n\n  close(): void {\n    this.element().removeAttribute('open');\n  }\n\n  open(): void {\n    this.element().setAttribute('open', '');\n\n    this.element().focus();\n  }\n\n  setLabel(label: string): void {\n    this.element().setAttribute('aria-label', label);\n  }\n}\n\nexport default Modal;\n", "import Element, { t } from '@dom111/element';\nimport { h } from '../lib/Element';\nimport Tooltip from './Tooltip';\n\nexport class Button extends Element {\n  constructor(label: string, title: string) {\n    super(h('button.button', t(label)));\n\n    this.append(new Tooltip(title, this.element()));\n  }\n}\n\nexport default Button;\n", "import Element, { on, t } from '@dom111/element';\nimport { h } from '../lib/Element';\n\nexport class Tooltip extends Element {\n  #content: string;\n  #parent: HTMLElement;\n\n  constructor(content: string, parent: HTMLElement) {\n    super(h('div.tooltip'));\n\n    this.#content = content;\n    this.#parent = parent;\n\n    this.append(t(this.#content));\n\n    this.bindEvents();\n  }\n\n  bindEvents(): void {\n    on(this.#parent, 'mouseenter', () => this.show());\n\n    on(this.#parent, 'mouseleave', () => this.hide());\n  }\n\n  hide(): void {\n    this.removeClass('show');\n\n    requestAnimationFrame(() => this.position());\n  }\n\n  position(): void {\n    this.element().style.setProperty(\n      'top',\n      `${this.#parent.offsetTop + this.#parent.offsetHeight + 10}px`\n    );\n    this.element().style.setProperty(\n      'left',\n      `${this.#parent.offsetLeft - this.element().offsetWidth / 2}px`\n    );\n  }\n\n  show(): void {\n    this.addClass('show');\n\n    requestAnimationFrame(() => this.position());\n  }\n}\n\nexport default Tooltip;\n", "import Element, { on, t } from '@dom111/element';\nimport Game from '../Game';\nimport Guesses from './Guesses';\nimport Letter from './Letter';\nimport { h } from '../lib/Element';\n\nenum SpecialKey {\n  BACKSPACE = 'Backspace',\n  ENTER = 'Enter',\n}\n\ntype SpecialKeys = SpecialKey.BACKSPACE | SpecialKey.ENTER;\n\nconst specialKeyIcons = {\n  [SpecialKey.BACKSPACE]: '\u232B',\n};\n\nexport class Keyboard extends Element {\n  #game: Game;\n  #guesses: Guesses;\n  #lookup: { [key: string]: Letter } = {};\n\n  #rows: (string | SpecialKeys)[][] = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    [SpecialKey.BACKSPACE, 'Z', 'X', 'C', 'V', 'B', 'N', 'M', SpecialKey.ENTER],\n  ];\n\n  constructor(guesses: Guesses, game: Game) {\n    super(h('section.keyboard[autofocus]'));\n\n    this.append(\n      ...this.#rows.map((keys) =>\n        h(\n          'section.row',\n          ...keys.map((key: string | SpecialKeys) => {\n            const letter = new Letter();\n\n            this.#lookup[key] = letter;\n\n            letter.setValue(key);\n            letter.element().setAttribute('data-key', key);\n\n            if (Object.prototype.hasOwnProperty.call(specialKeyIcons, key)) {\n              letter.empty();\n              letter.append(t(specialKeyIcons[key] ?? key));\n            }\n\n            letter.on('click', () => this.handleInput(key));\n\n            return letter.element();\n          })\n        )\n      )\n    );\n\n    this.#guesses = guesses;\n    this.#game = game;\n\n    this.bindKeyboard();\n  }\n\n  private bindKeyboard(): void {\n    on(document, 'keydown', (event) => this.handleInput(event.key));\n  }\n\n  private handleInput(key: string): void {\n    this.#guesses.onInput(key);\n\n    this.#rows.flat().forEach((char) => {\n      const letter = this.#lookup[char],\n        score = this.#game.letterScore(char);\n\n      letter.highlight(score);\n    });\n  }\n}\n\nexport default Keyboard;\n", "import './style/app.scss';\n\nimport Difficulty from './Game/Difficulty';\nimport Game from './Game';\nimport Guesses from './components/Guesses';\nimport Header from './components/Header';\nimport Keyboard from './components/Keyboard';\nimport Mode from './Game/Mode';\nimport { empty } from '@dom111/element';\nimport { wordLengths } from './Game/WordLists';\n\nconst game = new Game(() => {\n  const header = new Header(game),\n    guesses = new Guesses(game),\n    keyboard = new Keyboard(guesses, game),\n    appContainer = document.getElementById('app');\n\n  empty(appContainer);\n\n  appContainer.append(header.element(), guesses.element(), keyboard.element());\n});\n\ngame.setDifficulty(Difficulty.EASY);\ngame.setLengths(wordLengths);\ngame.setMode(Mode.THEMED);\ngame.setTheme('./lists/themes/animals.json');\ngame.start();\n"],
  "mappings": "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",
  "names": ["require_Element", "__commonJSMin", "exports", "e", "t", "s", "o", "r", "_o", "Difficulty", "difficulties", "labels", "label", "mode", "toDifficulty", "value", "intValue", "Difficulty_default", "Score", "Score_default", "InvalidOptions", "InvalidOptions_default", "themes", "getThemeByPath", "path", "themeDetails", "InvalidOptions_default", "label", "wordLengths", "wordLists", "wordListLoaders", "load", "length", "response", "Mode", "modes", "labels", "label", "mode", "toMode", "value", "intValue", "Mode_default", "Game", "#currentTarget", "#difficulty", "Difficulty_default", "#lengths", "#letterStatuses", "#mode", "#onStart", "#theme", "#validWords", "onStart", "lengths", "length", "load", "word", "letter", "Score_default", "guess", "wordForScoring", "result", "index", "score", "wordIndex", "difficulty", "mode", "theme", "themeDetails", "getThemeByPath", "possibleWords", "Difficulty", "clues", "Mode_default", "InvalidOptions_default", "Game_default", "import_element", "import_element", "import_element", "SelectorType", "AttributeAction", "reName", "reEscape", "actionTypes", "AttributeAction", "unpackPseudos", "isTraversal", "selector", "SelectorType", "stripQuotesFromPseudos", "funescape", "_", "escaped", "escapedWhitespace", "high", "unescapeCSS", "str", "isQuote", "c", "isWhitespace", "parse", "subselects", "endIndex", "parseSelector", "selectorIndex", "tokens", "getName", "offset", "match", "name", "stripWhitespace", "readValueWithParenthesis", "start", "counter", "isEscaped", "pos", "slashCount", "ensureNotTraversal", "addTraversal", "type", "addSpecialAttribute", "action", "finalizeSubselector", "loop", "firstChar", "namespace", "possibleAction", "value", "ignoreCase", "quote", "sectionEnd", "valueStart", "forceIgnore", "attributeSelector", "data", "quot", "h", "selector", "childNodes", "element", "parse", "selectors", "details", "childNode", "Letter", "Element", "#value", "h", "score", "Score_default", "value", "Letter_default", "Guess", "Element", "#letters", "#maxLength", "maxLength", "h", "i", "Letter_default", "letter", "score", "index", "key", "Guess_default", "Guesses", "Element", "#complete", "#game", "#guesses", "game", "h", "Guess_default", "key", "currentGuess", "hasAllLetters", "isGuessValid", "score", "Score_default", "Guesses_default", "import_element", "import_element", "import_element", "Modal", "Element", "#contentArea", "childNodes", "h", "event", "label", "Modal_default", "hideElement", "el", "showElement", "OptionsModal", "Modal_default", "game", "h", "modeSelect", "modes", "mode", "label", "themeSelect", "themes", "path", "difficultySelect", "difficulties", "difficulty", "modeRow", "themeRow", "Mode_default", "difficultyRow", "applyButton", "setMode", "toMode", "setTheme", "theme", "setDifficulty", "toDifficulty", "OptionsModal_default", "import_element", "import_element", "Tooltip", "Element", "#content", "#parent", "content", "parent", "h", "Tooltip_default", "Button", "Element", "label", "title", "h", "Tooltip_default", "Button_default", "Header", "Element", "game", "h", "label", "Mode_default", "cluesContainer", "optionsModal", "OptionsModal_default", "actions", "newGame", "Button_default", "hint", "options", "event", "currentClues", "clues", "Header_default", "import_element", "specialKeyIcons", "Keyboard", "Element", "#game", "#guesses", "#lookup", "#rows", "guesses", "game", "h", "keys", "key", "letter", "Letter_default", "event", "char", "score", "Keyboard_default", "import_element", "game", "Game_default", "header", "Header_default", "guesses", "Guesses_default", "keyboard", "Keyboard_default", "appContainer", "Difficulty_default", "wordLengths", "Mode_default"]
}
