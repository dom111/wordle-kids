{
  "version": 3,
  "sources": ["../node_modules/css-what/lib/es/types.js", "../node_modules/css-what/lib/es/parse.js", "../src/components/Element.ts", "../src/components/Letter.ts", "../src/components/Guess.ts", "../src/components/Guesses.ts", "../src/components/Header.ts", "../src/components/Keyboard.ts", "../src/Game.ts", "../src/app.ts"],
  "sourcesContent": ["export var SelectorType;\n(function (SelectorType) {\n    SelectorType[\"Attribute\"] = \"attribute\";\n    SelectorType[\"Pseudo\"] = \"pseudo\";\n    SelectorType[\"PseudoElement\"] = \"pseudo-element\";\n    SelectorType[\"Tag\"] = \"tag\";\n    SelectorType[\"Universal\"] = \"universal\";\n    // Traversals\n    SelectorType[\"Adjacent\"] = \"adjacent\";\n    SelectorType[\"Child\"] = \"child\";\n    SelectorType[\"Descendant\"] = \"descendant\";\n    SelectorType[\"Parent\"] = \"parent\";\n    SelectorType[\"Sibling\"] = \"sibling\";\n    SelectorType[\"ColumnCombinator\"] = \"column-combinator\";\n})(SelectorType || (SelectorType = {}));\n/**\n * Modes for ignore case.\n *\n * This could be updated to an enum, and the object is\n * the current stand-in that will allow code to be updated\n * without big changes.\n */\nexport const IgnoreCaseMode = {\n    Unknown: null,\n    QuirksMode: \"quirks\",\n    IgnoreCase: true,\n    CaseSensitive: false,\n};\nexport var AttributeAction;\n(function (AttributeAction) {\n    AttributeAction[\"Any\"] = \"any\";\n    AttributeAction[\"Element\"] = \"element\";\n    AttributeAction[\"End\"] = \"end\";\n    AttributeAction[\"Equals\"] = \"equals\";\n    AttributeAction[\"Exists\"] = \"exists\";\n    AttributeAction[\"Hyphen\"] = \"hyphen\";\n    AttributeAction[\"Not\"] = \"not\";\n    AttributeAction[\"Start\"] = \"start\";\n})(AttributeAction || (AttributeAction = {}));\n", "import { SelectorType, AttributeAction, } from \"./types\";\nconst reName = /^[^\\\\#]?(?:\\\\(?:[\\da-f]{1,6}\\s?|.)|[\\w\\-\\u00b0-\\uFFFF])+/;\nconst reEscape = /\\\\([\\da-f]{1,6}\\s?|(\\s)|.)/gi;\nconst actionTypes = new Map([\n    [126 /* Tilde */, AttributeAction.Element],\n    [94 /* Circumflex */, AttributeAction.Start],\n    [36 /* Dollar */, AttributeAction.End],\n    [42 /* Asterisk */, AttributeAction.Any],\n    [33 /* ExclamationMark */, AttributeAction.Not],\n    [124 /* Pipe */, AttributeAction.Hyphen],\n]);\n// Pseudos, whose data property is parsed as well.\nconst unpackPseudos = new Set([\n    \"has\",\n    \"not\",\n    \"matches\",\n    \"is\",\n    \"where\",\n    \"host\",\n    \"host-context\",\n]);\n/**\n * Checks whether a specific selector is a traversal.\n * This is useful eg. in swapping the order of elements that\n * are not traversals.\n *\n * @param selector Selector to check.\n */\nexport function isTraversal(selector) {\n    switch (selector.type) {\n        case SelectorType.Adjacent:\n        case SelectorType.Child:\n        case SelectorType.Descendant:\n        case SelectorType.Parent:\n        case SelectorType.Sibling:\n        case SelectorType.ColumnCombinator:\n            return true;\n        default:\n            return false;\n    }\n}\nconst stripQuotesFromPseudos = new Set([\"contains\", \"icontains\"]);\n// Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152\nfunction funescape(_, escaped, escapedWhitespace) {\n    const high = parseInt(escaped, 16) - 0x10000;\n    // NaN means non-codepoint\n    return high !== high || escapedWhitespace\n        ? escaped\n        : high < 0\n            ? // BMP codepoint\n                String.fromCharCode(high + 0x10000)\n            : // Supplemental Plane codepoint (surrogate pair)\n                String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);\n}\nfunction unescapeCSS(str) {\n    return str.replace(reEscape, funescape);\n}\nfunction isQuote(c) {\n    return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;\n}\nfunction isWhitespace(c) {\n    return (c === 32 /* Space */ ||\n        c === 9 /* Tab */ ||\n        c === 10 /* NewLine */ ||\n        c === 12 /* FormFeed */ ||\n        c === 13 /* CarriageReturn */);\n}\n/**\n * Parses `selector`, optionally with the passed `options`.\n *\n * @param selector Selector to parse.\n * @param options Options for parsing.\n * @returns Returns a two-dimensional array.\n * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),\n * the second contains the relevant tokens for that selector.\n */\nexport function parse(selector) {\n    const subselects = [];\n    const endIndex = parseSelector(subselects, `${selector}`, 0);\n    if (endIndex < selector.length) {\n        throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);\n    }\n    return subselects;\n}\nfunction parseSelector(subselects, selector, selectorIndex) {\n    let tokens = [];\n    function getName(offset) {\n        const match = selector.slice(selectorIndex + offset).match(reName);\n        if (!match) {\n            throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);\n        }\n        const [name] = match;\n        selectorIndex += offset + name.length;\n        return unescapeCSS(name);\n    }\n    function stripWhitespace(offset) {\n        selectorIndex += offset;\n        while (selectorIndex < selector.length &&\n            isWhitespace(selector.charCodeAt(selectorIndex))) {\n            selectorIndex++;\n        }\n    }\n    function readValueWithParenthesis() {\n        selectorIndex += 1;\n        const start = selectorIndex;\n        let counter = 1;\n        for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {\n            if (selector.charCodeAt(selectorIndex) ===\n                40 /* LeftParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter++;\n            }\n            else if (selector.charCodeAt(selectorIndex) ===\n                41 /* RightParenthesis */ &&\n                !isEscaped(selectorIndex)) {\n                counter--;\n            }\n        }\n        if (counter) {\n            throw new Error(\"Parenthesis not matched\");\n        }\n        return unescapeCSS(selector.slice(start, selectorIndex - 1));\n    }\n    function isEscaped(pos) {\n        let slashCount = 0;\n        while (selector.charCodeAt(--pos) === 92 /* BackSlash */)\n            slashCount++;\n        return (slashCount & 1) === 1;\n    }\n    function ensureNotTraversal() {\n        if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {\n            throw new Error(\"Did not expect successive traversals.\");\n        }\n    }\n    function addTraversal(type) {\n        if (tokens.length > 0 &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens[tokens.length - 1].type = type;\n            return;\n        }\n        ensureNotTraversal();\n        tokens.push({ type });\n    }\n    function addSpecialAttribute(name, action) {\n        tokens.push({\n            type: SelectorType.Attribute,\n            name,\n            action,\n            value: getName(1),\n            namespace: null,\n            ignoreCase: \"quirks\",\n        });\n    }\n    /**\n     * We have finished parsing the current part of the selector.\n     *\n     * Remove descendant tokens at the end if they exist,\n     * and return the last index, so that parsing can be\n     * picked up from here.\n     */\n    function finalizeSubselector() {\n        if (tokens.length &&\n            tokens[tokens.length - 1].type === SelectorType.Descendant) {\n            tokens.pop();\n        }\n        if (tokens.length === 0) {\n            throw new Error(\"Empty sub-selector\");\n        }\n        subselects.push(tokens);\n    }\n    stripWhitespace(0);\n    if (selector.length === selectorIndex) {\n        return selectorIndex;\n    }\n    loop: while (selectorIndex < selector.length) {\n        const firstChar = selector.charCodeAt(selectorIndex);\n        switch (firstChar) {\n            // Whitespace\n            case 32 /* Space */:\n            case 9 /* Tab */:\n            case 10 /* NewLine */:\n            case 12 /* FormFeed */:\n            case 13 /* CarriageReturn */: {\n                if (tokens.length === 0 ||\n                    tokens[0].type !== SelectorType.Descendant) {\n                    ensureNotTraversal();\n                    tokens.push({ type: SelectorType.Descendant });\n                }\n                stripWhitespace(1);\n                break;\n            }\n            // Traversals\n            case 62 /* GreaterThan */: {\n                addTraversal(SelectorType.Child);\n                stripWhitespace(1);\n                break;\n            }\n            case 60 /* LessThan */: {\n                addTraversal(SelectorType.Parent);\n                stripWhitespace(1);\n                break;\n            }\n            case 126 /* Tilde */: {\n                addTraversal(SelectorType.Sibling);\n                stripWhitespace(1);\n                break;\n            }\n            case 43 /* Plus */: {\n                addTraversal(SelectorType.Adjacent);\n                stripWhitespace(1);\n                break;\n            }\n            // Special attribute selectors: .class, #id\n            case 46 /* Period */: {\n                addSpecialAttribute(\"class\", AttributeAction.Element);\n                break;\n            }\n            case 35 /* Hash */: {\n                addSpecialAttribute(\"id\", AttributeAction.Equals);\n                break;\n            }\n            case 91 /* LeftSquareBracket */: {\n                stripWhitespace(1);\n                // Determine attribute name and namespace\n                let name;\n                let namespace = null;\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {\n                    // Equivalent to no namespace\n                    name = getName(1);\n                }\n                else if (selector.startsWith(\"*|\", selectorIndex)) {\n                    namespace = \"*\";\n                    name = getName(2);\n                }\n                else {\n                    name = getName(0);\n                    if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                        selector.charCodeAt(selectorIndex + 1) !==\n                            61 /* Equal */) {\n                        namespace = name;\n                        name = getName(1);\n                    }\n                }\n                stripWhitespace(0);\n                // Determine comparison operation\n                let action = AttributeAction.Exists;\n                const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));\n                if (possibleAction) {\n                    action = possibleAction;\n                    if (selector.charCodeAt(selectorIndex + 1) !==\n                        61 /* Equal */) {\n                        throw new Error(\"Expected `=`\");\n                    }\n                    stripWhitespace(2);\n                }\n                else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {\n                    action = AttributeAction.Equals;\n                    stripWhitespace(1);\n                }\n                // Determine value\n                let value = \"\";\n                let ignoreCase = null;\n                if (action !== \"exists\") {\n                    if (isQuote(selector.charCodeAt(selectorIndex))) {\n                        const quote = selector.charCodeAt(selectorIndex);\n                        let sectionEnd = selectorIndex + 1;\n                        while (sectionEnd < selector.length &&\n                            (selector.charCodeAt(sectionEnd) !== quote ||\n                                isEscaped(sectionEnd))) {\n                            sectionEnd += 1;\n                        }\n                        if (selector.charCodeAt(sectionEnd) !== quote) {\n                            throw new Error(\"Attribute value didn't end\");\n                        }\n                        value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));\n                        selectorIndex = sectionEnd + 1;\n                    }\n                    else {\n                        const valueStart = selectorIndex;\n                        while (selectorIndex < selector.length &&\n                            ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&\n                                selector.charCodeAt(selectorIndex) !==\n                                    93 /* RightSquareBracket */) ||\n                                isEscaped(selectorIndex))) {\n                            selectorIndex += 1;\n                        }\n                        value = unescapeCSS(selector.slice(valueStart, selectorIndex));\n                    }\n                    stripWhitespace(0);\n                    // See if we have a force ignore flag\n                    const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;\n                    // If the forceIgnore flag is set (either `i` or `s`), use that value\n                    if (forceIgnore === 115 /* LowerS */) {\n                        ignoreCase = false;\n                        stripWhitespace(1);\n                    }\n                    else if (forceIgnore === 105 /* LowerI */) {\n                        ignoreCase = true;\n                        stripWhitespace(1);\n                    }\n                }\n                if (selector.charCodeAt(selectorIndex) !==\n                    93 /* RightSquareBracket */) {\n                    throw new Error(\"Attribute selector didn't terminate\");\n                }\n                selectorIndex += 1;\n                const attributeSelector = {\n                    type: SelectorType.Attribute,\n                    name,\n                    action,\n                    value,\n                    namespace,\n                    ignoreCase,\n                };\n                tokens.push(attributeSelector);\n                break;\n            }\n            case 58 /* Colon */: {\n                if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {\n                    tokens.push({\n                        type: SelectorType.PseudoElement,\n                        name: getName(2).toLowerCase(),\n                        data: selector.charCodeAt(selectorIndex) ===\n                            40 /* LeftParenthesis */\n                            ? readValueWithParenthesis()\n                            : null,\n                    });\n                    continue;\n                }\n                const name = getName(1).toLowerCase();\n                let data = null;\n                if (selector.charCodeAt(selectorIndex) ===\n                    40 /* LeftParenthesis */) {\n                    if (unpackPseudos.has(name)) {\n                        if (isQuote(selector.charCodeAt(selectorIndex + 1))) {\n                            throw new Error(`Pseudo-selector ${name} cannot be quoted`);\n                        }\n                        data = [];\n                        selectorIndex = parseSelector(data, selector, selectorIndex + 1);\n                        if (selector.charCodeAt(selectorIndex) !==\n                            41 /* RightParenthesis */) {\n                            throw new Error(`Missing closing parenthesis in :${name} (${selector})`);\n                        }\n                        selectorIndex += 1;\n                    }\n                    else {\n                        data = readValueWithParenthesis();\n                        if (stripQuotesFromPseudos.has(name)) {\n                            const quot = data.charCodeAt(0);\n                            if (quot === data.charCodeAt(data.length - 1) &&\n                                isQuote(quot)) {\n                                data = data.slice(1, -1);\n                            }\n                        }\n                        data = unescapeCSS(data);\n                    }\n                }\n                tokens.push({ type: SelectorType.Pseudo, name, data });\n                break;\n            }\n            case 44 /* Comma */: {\n                finalizeSubselector();\n                tokens = [];\n                stripWhitespace(1);\n                break;\n            }\n            default: {\n                if (selector.startsWith(\"/*\", selectorIndex)) {\n                    const endIndex = selector.indexOf(\"*/\", selectorIndex + 2);\n                    if (endIndex < 0) {\n                        throw new Error(\"Comment was not terminated\");\n                    }\n                    selectorIndex = endIndex + 2;\n                    // Remove leading whitespace\n                    if (tokens.length === 0) {\n                        stripWhitespace(0);\n                    }\n                    break;\n                }\n                let namespace = null;\n                let name;\n                if (firstChar === 42 /* Asterisk */) {\n                    selectorIndex += 1;\n                    name = \"*\";\n                }\n                else if (firstChar === 124 /* Pipe */) {\n                    name = \"\";\n                    if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {\n                        addTraversal(SelectorType.ColumnCombinator);\n                        stripWhitespace(2);\n                        break;\n                    }\n                }\n                else if (reName.test(selector.slice(selectorIndex))) {\n                    name = getName(0);\n                }\n                else {\n                    break loop;\n                }\n                if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&\n                    selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {\n                    namespace = name;\n                    if (selector.charCodeAt(selectorIndex + 1) ===\n                        42 /* Asterisk */) {\n                        name = \"*\";\n                        selectorIndex += 2;\n                    }\n                    else {\n                        name = getName(1);\n                    }\n                }\n                tokens.push(name === \"*\"\n                    ? { type: SelectorType.Universal, namespace }\n                    : { type: SelectorType.Tag, name, namespace });\n            }\n        }\n    }\n    finalizeSubselector();\n    return selectorIndex;\n}\n", "import { parse } from 'css-what';\n\nexport const h = (selector: string, ...childNodes: Node[]) => {\n  const [element] = parse(selector).map((selectors) =>\n    selectors.reduce((element: HTMLElement | null, details) => {\n      if (element === null && details.type !== 'tag') {\n        throw new Error('Unexpected.');\n      }\n\n      if (details.type === 'tag') {\n        return document.createElement(details.name);\n      }\n\n      if (details.type === 'attribute' && details.name !== 'class') {\n        element.setAttribute(details.name, details.value ?? '');\n      }\n\n      if (details.type === 'attribute' && details.name === 'class') {\n        element.classList.add(details.value);\n      }\n\n      return element;\n    }, null)\n  );\n\n  childNodes.forEach((childNode) => element.append(childNode));\n\n  return element;\n};\n\nexport const t = (content: string) => document.createTextNode(content);\n\nexport class Element {\n  #element: HTMLElement;\n\n  constructor(selector: string, ...childNodes: Node[]) {\n    this.#element = h(selector, ...childNodes);\n  }\n\n  element(): HTMLElement {\n    return this.#element;\n  }\n\n  empty(): void {\n    this.element().childNodes.forEach((childNode) => childNode.remove());\n  }\n}\n\nexport default Element;\n", "import Element, { t } from './Element';\nimport { Score, ScoreType } from '../Score';\n\nexport class Letter extends Element {\n  #value: string = '';\n\n  constructor() {\n    super('span.letter');\n  }\n\n  hasValue(): boolean {\n    return this.#value !== '';\n  }\n\n  highlight(score: ScoreType): void {\n    if (score === Score.RIGHT) {\n      this.element().classList.add('right');\n\n      return;\n    }\n\n    if (score === Score.WRONG_PLACE) {\n      this.element().classList.add('wrong-place');\n\n      return;\n    }\n\n    if (score === Score.WRONG) {\n      this.element().classList.add('wrong');\n\n      return;\n    }\n  }\n\n  setValue(value: string): void {\n    this.#value = value;\n\n    this.empty();\n    this.element().append(t(value));\n  }\n\n  value(): string {\n    return this.#value;\n  }\n}\n\nexport default Letter;\n", "import Element, { h } from './Element';\nimport Letter from './Letter';\nimport { ScoreList } from '../Score';\n\nexport class Guess extends Element {\n  #letters: Letter[] = [];\n  #maxLength: number;\n\n  constructor(maxLength: number) {\n    super('div.guess');\n\n    this.#maxLength = maxLength;\n\n    for (let i = 0; i < maxLength; i++) {\n      this.#letters.push(new Letter());\n    }\n\n    this.element().append(\n      ...this.#letters.map((letter: Letter) => letter.element())\n    );\n  }\n\n  applyScore(score: ScoreList): void {\n    this.#letters.forEach((letter, index) => letter.highlight(score[index]));\n  }\n\n  clearError(): void {\n    this.element().classList.remove('error');\n  }\n\n  guess(): string[] {\n    return this.#letters.map((letter: Letter) => letter.value());\n  }\n\n  highlightError(): void {\n    this.element().classList.add('error');\n  }\n\n  length(): number {\n    return this.#letters.filter((letter: Letter): boolean => letter.hasValue())\n      .length;\n  }\n\n  onInput(key: string) {\n    if (key === 'Backspace' && this.length() === 0) {\n      return;\n    }\n\n    if (key === 'Backspace') {\n      this.clearError();\n\n      this.#letters[this.length() - 1].setValue('');\n\n      return;\n    }\n\n    if (this.length() === this.#maxLength) {\n      return;\n    }\n\n    this.#letters[this.length()].setValue(key);\n  }\n}\n\nexport default Guess;\n", "import Element from './Element';\nimport Guess from './Guess';\nimport Game from '../Game';\nimport { Score } from '../Score';\n\nexport class Guesses extends Element {\n  #game: Game;\n  #guesses: Guess[] = [];\n\n  constructor(game: Game) {\n    super('section.guesses');\n\n    this.#game = game;\n\n    this.addGuess();\n  }\n\n  private addGuess(): void {\n    this.#guesses.push(new Guess(this.#game.currentWordLength()));\n    this.element().append(this.currentGuess().element());\n\n    this.element().scrollTo({\n      top: this.element().scrollHeight,\n    });\n  }\n\n  private currentGuess(): Guess {\n    return this.#guesses[this.#guesses.length - 1];\n  }\n\n  onInput(key: string): void {\n    const currentGuess = this.currentGuess().guess(),\n      hasAllLetters =\n        this.currentGuess().length() === this.#game.currentWordLength(),\n      isGuessValid = this.#game.validate(currentGuess);\n\n    // TODO: Any other synonyms?\n    if (key === 'Enter' && hasAllLetters && isGuessValid) {\n      const score = this.#game.score(currentGuess);\n\n      this.currentGuess().applyScore(score);\n\n      if (score.every((score) => score === Score.RIGHT)) {\n        // Do celebration!\n        return;\n      }\n\n      this.addGuess();\n\n      return;\n    }\n\n    if (key === 'Enter' && hasAllLetters && !isGuessValid) {\n      this.currentGuess().highlightError();\n    }\n\n    if (key === 'Backspace') {\n      this.currentGuess().onInput(key);\n    }\n\n    if (key.match(/^[A-Z]$/i)) {\n      this.currentGuess().onInput(key.toUpperCase());\n    }\n  }\n}\n\nexport default Guesses;\n", "import Element, { h, t } from './Element';\n\nexport class Header extends Element {\n  constructor() {\n    super(\n      'nav',\n      h('h1', t('Wordle Kids')),\n      h('p', t('A kid-friendly Wordle clone with small words.'))\n    );\n  }\n}\n\nexport default Header;\n", "import Element, { h, t } from './Element';\nimport Guesses from './Guesses';\nimport Letter from './Letter';\nimport Game from \"../Game\";\n\nexport enum SpecialKey {\n  BACKSPACE = 'Backspace',\n  ENTER = 'Enter',\n}\n\nexport type SpecialKeys = SpecialKey.BACKSPACE | SpecialKey.ENTER;\n\nconst specialKeyIcons = {\n  [SpecialKey.BACKSPACE]: '\u232B',\n  // [SpecialKey.ENTER]: '\u21B2',\n};\n\nexport class Keyboard extends Element {\n  #game: Game;\n  #guesses: Guesses;\n  #lookup: { [key: string]: Letter } = {};\n\n  // TODO: Could this generated using https://developer.mozilla.org/en-US/docs/Web/API/KeyboardLayoutMap to match the\n  //  user's layout?\n  #rows: (string | SpecialKeys)[][] = [\n    ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'],\n    ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L'],\n    [SpecialKey.BACKSPACE, 'Z', 'X', 'C', 'V', 'B', 'N', 'M', SpecialKey.ENTER],\n  ];\n\n  constructor(guesses: Guesses, game: Game) {\n    super('section.keyboard[autofocus]');\n\n    this.element().append(\n      ...this.#rows.map((keys) =>\n        h(\n          'section.row',\n          ...keys.map((key: string | SpecialKeys) => {\n            const letter = new Letter();\n\n            this.#lookup[key] = letter;\n\n            letter.setValue(key);\n            letter.element().setAttribute('data-key', key);\n\n            if (Object.prototype.hasOwnProperty.call(specialKeyIcons, key)) {\n              letter.empty();\n              letter.element().append(t(specialKeyIcons[key] ?? key));\n            }\n\n            letter\n              .element()\n              .addEventListener('click', () => this.handleInput(key));\n\n            return letter.element();\n          })\n        )\n      )\n    );\n\n    this.#guesses = guesses;\n    this.#game = game;\n\n    this.bindKeyboard();\n  }\n\n  private bindKeyboard(): void {\n    document.addEventListener('keydown', (event) =>\n      this.handleInput(event.key)\n    );\n  }\n\n  private handleInput(key: string): void {\n    this.#guesses.onInput(key);\n\n    this.#rows.flat()\n      .forEach((char) => {\n        const letter = this.#lookup[char],\n          score = this.#game.letterScore(char);\n\n        letter.highlight(score);\n      });\n  }\n}\n\nexport default Keyboard;\n", "import {Score, ScoreList, ScoreType} from './Score';\n\nexport class Game {\n  #currentWord: string[];\n  #letterStatuses: {[key: string]: ScoreType} = {};\n  #validWords: string[] = [];\n\n  currentWordLength(): number {\n    return this.#currentWord.length;\n  }\n\n  // TODO: Use a wordlist file/files (JSON, or plain text),\n  //  also support dynamic list provision (pass data in via hash, URL/specific lists) to allow kids to practice specific\n  //  spellings etc - backed up by a list of known - kid safe - words.\n  // TODO: implement options to determine required wordlists\n  // TODO: extend the wordlists to include those that can be used as answers and those that can be selected as the\n  //  target\n  private async getWordlist(): Promise<string[]> {\n    const response = await fetch('./lists/3-letter.json');\n\n    return (await response.json())\n      .map((word) => word.toUpperCase());\n\n    // [\n    //   // 'bat',\n    //   // 'cat',\n    //   // 'eat',\n    //   // 'fat',\n    //   // 'hat',\n    //   // 'mat',\n    //   // 'pat',\n    //   // 'rat',\n    //   // 'sat',\n    //   // 'vat'\n    //   // 'book',\n    //   // 'girl',\n    //   'house',\n    //   'louse',\n    //   'mouse',\n    //   'shoes',\n    //   'spout',\n    //   'short',\n    //   'spent',\n    //   'horse',\n    // ].forEach((word: string) => this.#validWords.push(word.toUpperCase()));\n  }\n\n  async init(): Promise<void> {\n    this.#validWords = await this.getWordlist();\n    this.setCurrentWord();\n  }\n\n  letterScore(letter: string): ScoreType {\n    return this.#letterStatuses[letter] ?? Score.UNKNOWN;\n  }\n\n  public score(guess: string[]): ScoreList {\n    const wordForScoring = [...this.#currentWord];\n\n    return wordForScoring\n      .reduce((result: ScoreList, letter: string, index: number): ScoreList => {\n        if (letter === guess[index]) {\n          this.#letterStatuses[letter] = result[index] = Score.RIGHT;\n\n          // Remove the word so it doesn't get scored in other places\n          wordForScoring[index] = null;\n        }\n\n        return result;\n      }, new Array(this.currentWordLength()).fill(Score.UNKNOWN))\n      .map((score: ScoreType, index: number) => {\n        if (score === Score.RIGHT) {\n          return score;\n        }\n\n        const wordIndex = wordForScoring.indexOf(guess[index]);\n\n        if (wordIndex > -1) {\n          wordForScoring[wordIndex] = null;\n\n          return this.#letterStatuses[guess[index]] = Score.WRONG_PLACE;\n        }\n\n        return this.#letterStatuses[guess[index]] = Score.WRONG;\n      });\n  }\n\n  private setCurrentWord(): void {\n    // TODO: check game mode\n    this.#currentWord = [\n      ...this.#validWords[\n        Math.floor(this.#validWords.length * Math.random())\n      ].toUpperCase(),\n    ];\n  }\n\n  validate(guess: string[]): boolean {\n    return this.#validWords.includes(guess.join(''));\n  }\n}\n\nexport default Game;\n", "import './style/app.scss';\n\nimport Guesses from './components/Guesses';\nimport Header from './components/Header';\nimport Keyboard from './components/Keyboard';\nimport Game from './Game';\n\nconst game = new Game();\n\ngame.init()\n  .then(() => {\n    const header = new Header(),\n      guesses = new Guesses(game),\n      keyboard = new Keyboard(guesses, game),\n      appContainer = document.getElementById('app');\n\n    appContainer.append(header.element(), guesses.element(), keyboard.element());\n  });"],
  "mappings": "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",
  "names": ["SelectorType", "AttributeAction", "reName", "reEscape", "actionTypes", "AttributeAction", "unpackPseudos", "isTraversal", "selector", "SelectorType", "stripQuotesFromPseudos", "funescape", "_", "escaped", "escapedWhitespace", "high", "unescapeCSS", "str", "isQuote", "c", "isWhitespace", "parse", "subselects", "endIndex", "parseSelector", "selectorIndex", "tokens", "getName", "offset", "match", "name", "stripWhitespace", "readValueWithParenthesis", "start", "counter", "isEscaped", "pos", "slashCount", "ensureNotTraversal", "addTraversal", "type", "addSpecialAttribute", "action", "finalizeSubselector", "loop", "firstChar", "namespace", "possibleAction", "value", "ignoreCase", "quote", "sectionEnd", "valueStart", "forceIgnore", "attributeSelector", "data", "quot", "h", "selector", "childNodes", "element", "parse", "selectors", "details", "_a", "childNode", "t", "content", "_element", "Element", "__privateAdd", "__privateSet", "__privateGet", "Element_default", "_value", "Letter", "Element_default", "__privateAdd", "__privateGet", "score", "value", "__privateSet", "t", "Letter_default", "_letters", "_maxLength", "Guess", "Element_default", "maxLength", "__privateAdd", "__privateSet", "i", "__privateGet", "Letter_default", "letter", "score", "index", "key", "Guess_default", "_game", "_guesses", "Guesses", "Element_default", "game", "__privateAdd", "__privateSet", "__privateGet", "Guess_default", "key", "currentGuess", "hasAllLetters", "isGuessValid", "score", "Guesses_default", "Header", "Element_default", "h", "t", "Header_default", "specialKeyIcons", "_game", "_guesses", "_lookup", "_rows", "Keyboard", "Element_default", "guesses", "game", "__privateAdd", "__privateGet", "keys", "h", "key", "_a", "letter", "Letter_default", "t", "__privateSet", "event", "char", "score", "Keyboard_default", "_currentWord", "_letterStatuses", "_validWords", "Game", "__privateAdd", "__privateGet", "__async", "word", "__privateSet", "letter", "_a", "guess", "wordForScoring", "result", "index", "score", "wordIndex", "Game_default", "game", "Game_default", "header", "Header_default", "guesses", "Guesses_default", "keyboard", "Keyboard_default"]
}
